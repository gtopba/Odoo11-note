Odoo 11 on Ubuntu server 18 step by step (Database Locale should be changed accord to languge)

1. 		sudo apt install ssh
		ip address
		
		copy the ip address to PuTTy then open
		
2. 		sudo nano /etc/apt/sources.list

	then add  universe at the end of each line, like this:

	deb http://archive.ubuntu.com/ubuntu bionic main universe
	deb http://archive.ubuntu.com/ubuntu bionic-security main universe 
	deb http://archive.ubuntu.com/ubuntu bionic-updates main universe
	
	Press Ctrl+O to save the file.

	then run:

		sudo apt update
		sudo apt upgrade
		
	and finally:

		sudo apt install python3-pip
		
3.	Install git, pip and all other tools and libraries required to build Odoo dependencies:
	
		sudo apt install git python3-pip build-essential wget python3-dev python3-venv python3-wheel libxslt-dev libzip-dev libldap2-dev libsasl2-dev python3-setuptools node-less
		
4.	Add new user to run odoo service
	
		sudo useradd -m -d /opt/odoo -U -r -s /bin/bash odoo
		
5.	Install the Postgres package from the Ubuntu’s default repositories:

		sudo apt-get install postgresql
	--------------------------------------------------------------------------------------------------
	Using pgAdmin
	
	go to /etc/postgresql/9.6/main/ then sudo nano postgresql.conf
		add listening address = '*'
	
	sudo nano pg_hba.conf
		add host all all 0.0.0.0/0 md5         (to allow all ip can login to database , not good , for test only)
		
	sudo service postgresql restart
	
	sudo -u postgres psql postgres
	\password postgres
	(change password to sth like admin)
	\q
	(this will change password)
	
	using pgAdmin software to access the postgres -> register server
	Name ODOO DEV
	Host ipadress of the server
	Port 5432
	DB postgres
	Username postgres
	Password admin
	--------------------------------------------------------------------------------------------------
		
	create a postgres user with the same name as the previously created system user, in our case odoo:
	
		sudo su - postgres -c "createuser -s odoo"
		
6.	switch to odoo user.

		sudo su - odoo
		whoami
		
7.	first clone the odoo from the GitHub repository:

		git clone https://www.github.com/odoo/odoo --depth 1 --branch 11.0 /opt/odoo/odoo11
		
8.	create a new virtual environment:

		cd /opt/odoo
		python3 -m venv odoo11-venv
		
	activate the environment 
	
		source odoo11-venv/bin/activate
		
9.	install all required Python modules with pip3:

		pip3 install wheel
		pip3 install -r odoo11/requirements.txt
		
10.	Once the installation is completed deactivate the environment and switch back to your sudo user 
		
		deactivate
		exit
		
	If you plan to install custom modules it is best to install those modules in a separate directory:
	
		sudo mkdir /opt/odoo/odoo11-custom-addons
		sudo chown odoo: /opt/odoo/odoo11-custom-addons
		
11.	Next, we need to create a configuration file, we can either create a new one from scratch or copy the included configuration file:

		sudo cp /opt/odoo/odoo11/debian/odoo.conf /etc/odoo11.conf
		
	Open the file and edit it as follows:
	
		sudo nano /etc/odoo11.conf
		
		[options]
		; This is the password that allows database operations:
		admin_passwd = my_admin_passwd
		db_host = False
		db_port = False
		db_user = odoo
		db_password = False
		addons_path = /opt/odoo/odoo11/addons
		; If you are using custom modules
		; addons_path = /opt/odoo/odoo11/addons,/opt/odoo/odoo11-custom-addons
		
	***Do not forget to change the my_admin_passwd to something more secure and adjust the addons_path if you’re using custom modules.***

		ctrl+o -> enter to save ctrl+x to exit
	
12.	To run odoo as a service we will create a odoo11.service unit file in the /etc/systemd/system/ directory with the following contents:

		sudo nano /etc/systemd/system/odoo11.service
		
		[Unit]
		Description=Odoo11
		Requires=postgresql.service
		After=network.target postgresql.service

		[Service]
		Type=simple
		SyslogIdentifier=odoo11
		PermissionsStartOnly=true
		User=odoo
		Group=odoo
		ExecStart=/opt/odoo/odoo11-venv/bin/python3 /opt/odoo/odoo11/odoo-bin -c /etc/odoo11.conf
		StandardOutput=journal+console

		[Install]
		WantedBy=multi-user.target
		
		ctrl+o -> enter to save and ctrl+x to exit
		
13.	Notify systemd that we created a new unit file and start the Odoo service:

		sudo systemctl daemon-reload
		sudo systemctl start odoo11
		
14.	You can check the service status with the the following command:

		sudo systemctl status odoo11
		
15.	enable the Odoo service to be automatically started at boot time:

		sudo systemctl enable odoo11
		
16.	see the messages logged by the Odoo service you can use the command below:

		sudo journalctl -u odoo11
		
Test the Installation

	Open your browser and type: http://<your_domain_or_IP_address>:8069
	
Configure Nginx as a SSL termination proxy

	If you want to use Nginx as a SSL termination proxy make sure that you have meet the following prerequisites:

	1. You have a domain name pointing to your public server IP. In this tutorial we will use example.com.
	2. You have Nginx installed by following these instructions.
	3. You have a SSL certificate installed for your domain. You can install a free Let’s Encrypt SSL certificate by following these instructions .
	The default Odoo web server is serving traffic over HTTP. To make our Odoo deployment more secure we will configure Nginx as a SSL termination proxy which will serve the traffic over HTTPS.

	SSL termination proxy is a proxy server which handles the SSL encryption/decryption. This means that our termination proxy (Nginx) will handle and decrypt incoming TLS connections (HTTPS), and it will pass on the unencrypted requests to our internal service (Odoo) so the traffic between Nginx and Odoo will not be encrypted (HTTP).

	We need to tell Odoo that we will use a proxy, open the configuration file and add the following line:

		/etc/odoo11.conf
		proxy_mode = True

	Restart the Odoo service for the changes to take effect:

		sudo systemctl restart odoo11

	Using Nginx as a proxy give us several benefits. In this example we will configure SSL Termination, HTTP to HTTPS redirection, WWW to non-WWW redirection, cache the static files and enable GZip compression.

		/etc/nginx/sites-enabled/example.com
		# Odoo servers
		upstream odoo {
		 server 127.0.0.1:8069;
		}

		upstream odoochat {
		 server 127.0.0.1:8072;
		}

		# HTTP -> HTTPS
		server {
			listen 80;
			server_name www.example.com example.com;

			include snippets/letsencrypt.conf;
			return 301 https://example.com$request_uri;
		}

		# WWW -> NON WWW
		server {
			listen 443 ssl http2;
			server_name www.example.com;

			ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
			ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
			ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;
			include snippets/ssl.conf;

			return 301 https://example.com$request_uri;
		}

		server {
			listen 443 ssl http2;
			server_name example.com;

			proxy_read_timeout 720s;
			proxy_connect_timeout 720s;
			proxy_send_timeout 720s;

			# Proxy headers
			proxy_set_header X-Forwarded-Host $host;
			proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			proxy_set_header X-Forwarded-Proto $scheme;
			proxy_set_header X-Real-IP $remote_addr;

			# SSL parameters
			ssl_certificate /etc/letsencrypt/live/example.com/fullchain.pem;
			ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
			ssl_trusted_certificate /etc/letsencrypt/live/example.com/chain.pem;
			include snippets/ssl.conf;

			# log files
			access_log /var/log/nginx/odoo.access.log;
			error_log /var/log/nginx/odoo.error.log;

			# Handle longpoll requests
			location /longpolling {
				proxy_pass http://odoochat;
			}

			# Handle / requests
			location / {
			   proxy_redirect off;
			   proxy_pass http://odoo;
			}

			# Cache static files
			location ~* /web/static/ {
				proxy_cache_valid 200 90m;
				proxy_buffering on;
				expires 864000;
				proxy_pass http://odoo;
			}

			# Gzip
			gzip_types text/css text/less text/plain text/xml application/xml application/json application/javascript;
			gzip on;
		}

	Don’t forget to replace example.com with your Odoo domain and set the correct path to the SSL certificate files. The snippets used in this configuration are created in this guide .

	Once you are done, restart the Nginx service with:

		sudo systemctl restart nginx

	
Change the binding interface

	This step is optional, but it is a good security practice. By default, Odoo server listens to port 8069 on all interfaces, so if you want to disable direct access to your Odoo instance you can either block the port 8069 for all public interfaces or force Odoo to listen only on the local interface.

	In this guide we will force Odoo to listen only on 127.0.0.1, open the Odoo configuration add the following two lines at the end of the file:

		/etc/odoo11.conf
		xmlrpc_interface = 127.0.0.1
		netrpc_interface = 127.0.0.1
	
	Save the configuration file and restart the Odoo server for the changes to take effect:

		sudo systemctl restart odoo
	
	
Enable multiprocessing

	By default, Odoo is working in multithreading mode. For production deployments, it is recommended to switch to the multiprocessing server as it increases stability, and make better usage of the system resources. In order to enable multiprocessing we need to edit the Odoo configuration and set a non-zero number of worker processes.

	Multiprocessing mode is only available on Unix-based systems it is available on Windows systems

	The number of workers is calculated based on the number of CPU cores in the system and the available RAM memory.

	According to the official [Odoo documentation](“https://www.odoo.com/documentation/11.0/setup/deploy.html") to calculate the workers number and required RAM memory size we will use the following formulas and assumptions:

	Worker number calculation

	theoretical maximal number of worker = (system_cpus * 2) + 1
	1 worker can serve ~= 6 concurrent users
	Cron workers also requires CPU
	RAM memory size calculation

	We will consider that 20% of all requests are heavy requests, while 80% are lighter ones. Heavy requests are using around 1 GB of RAM while the lighter ones are using around 150 MB of RAM
	Needed RAM = number_of_workers * ( (light_worker_ratio * light_worker_ram_estimation) + (heavy_worker_ratio * heavy_worker_ram_estimation) )
	If you do not know how many CPUs you have on your system you can use the following command:

		grep -c ^processor /proc/cpuinfo
	
	Let’s say we have a system with 4 CPU cores, 8 GB of RAM memory and 30 concurrent Odoo users.

	30 users / 6 = **5** (5 is theoretical number of workers needed )
	(4 * 2) + 1 = **9** ( 9 is the theoretical maximum number of workers)
	Based on the calculation above we can use 5 workers + 1 worker for the cron worker which is total of 6 workers. Let’s check if the RAM memory consumption based on the number of the workers.

	RAM = 6 * ((0.8*150) + (0.2*1024)) ~= 2 GB of RAM
	The calculation above show us that our Odoo installation will need around 2GB of RAM.

	To switch to multiprocessing mode, open the configuration file and append the following lines:

		/etc/odoo11.conf
		limit_memory_hard = 2684354560
		limit_memory_soft = 2147483648
		limit_request = 8192
		limit_time_cpu = 600
		limit_time_real = 1200
		max_cron_threads = 1
		workers = 5
	
	Restart the Odoo service for the changes to take effect:

		sudo systemctl restart odoo11
	
	The rest of the system resources will be used by other services that run on our machine. In this guide we installed Odoo along with PostgreSQL and Nginx on a same server and depending on your setup you may also have other services running on your server.

Conclusion

That’s it! This tutorial walked you through the installation of Odoo 11 on Ubuntu 18.04 in a Python virtual environment using Nginx as a reverse proxy. You also learned how to enable multiprocessing and optimize Odoo for production environment. You may also want to check our tutorial about how to create automatic daily backups of your Odoo databases.


ref :
https://linuxize.com/post/how-to-deploy-odoo-11-on-ubuntu-18-04/
